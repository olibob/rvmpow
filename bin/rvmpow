#!/usr/bin/env ruby
# encoding: utf-8

# TODO: include private part from CLI in all Thor classes.
#  			Create constants for repetitive strings.

require 'thor'
require 'rvmpow'
require 'rvmpow/shared_private_methods'

class Add < Thor
	include RvmPow

	def initialize(*args)
	  super
	  @pow = Pow.new
	end

	desc "powenv", ADD_POWENV
	def powenv
		exec_cmd { @pow.createPowenvFile }
	end

	desc "powlink", ADD_LINK
	def powlink
		exec_cmd { @pow.createPowLink }
	end

	desc "restart_file", TOUCH_RESTART
	def restart_file
		exec_cmd { @pow.touchRestartFile }
	end

	desc "gitignore", ADD_GITIGNORE
	def gitignore
		exec_cmd { @pow.gitignorePowenv }
	end

	desc "addRvmInfoToGemfile", ADD_GEMFILE
	def gemfile
		exec_cmd { @pow.addRvmInfoToGemfile }
	end
end


class Remove < Thor
	include RvmPow

	def initialize(*args)
	  super
	  @pow = Pow.new
	end

	desc "powenv", REMOVE_POWENV
	def powenv
		exec_cmd { @pow.deletePowenvFile }
	end

	desc "restart", REMOVE_RESTART
	def restart
		exec_cmd { @pow.deleteRestartFile }
	end

	desc "powlink", REMOVE_LINK
	def powlink
		exec_cmd { @pow.deletePowLink }
	end

	desc "gitignore", REMOVE_GITIGNORE
	def gitignore
		exec_cmd { @pow.restoreGitignore }
	end

	desc "gemfile", REMOVE_GEMFILE
	def gemfile
		exec_cmd {@pow.restoreGemfile }
	end
end


class CLI < Thor
	include RvmPow

	def initialize(*args)
	  super
	  @pow = Pow.new
	end


	desc "init", "enable pow"
	long_desc <<-LONGDESC
		`rvmpow init` will:

		- create a '.powenv' file in the current directory.
		\x5- add .powenv to the .gitignore file.
		\x5- add app link in ~/.pow
		\x5- add ruby and gemset info to Gemfile.
		\x5- touch restart.txt in ./tmp/


	LONGDESC
	option :show, type: :boolean, desc: "open in default browser"
	def init
		exec_cmd {nil}

		shitHappens = false

		# fail safe to avoid multiple initializations
		if File.exists?('.powenv')
			say "Initialization aborted.\nLooks like you already ran it on this project."
			exit 0
		end

		if @pow.createPowenvFile
			say_status "Done", ADD_POWENV, :green
		else
			say_status "Failed", ADD_POWENV, :red
			shitHappens = true
		end

		if @pow.createPowLink
			say_status "Done", ADD_LINK, :green
		else
			say_status "Failed", ADD_LINK, :red
			shitHappens = true
		end

		if @pow.touchRestartFile
			say_status "Done", TOUCH_RESTART, :green
		else
			say_status "Failed", TOUCH_RESTART, :red
			shitHappens = true
		end

		if @pow.gitignorePowenv
			say_status "Done", ADD_GITIGNORE, :green
		else
			say_status "Failed", ADD_GITIGNORE, :red
			shitHappens = true
		end

		if @pow.addRvmInfoToGemfile
			say_status "Done", ADD_GEMFILE, :green
		else
			say_status "Failed", ADD_GEMFILE, :red
			shitHappens = true
		end

		if options[:show]
			if shitHappens
				say "Opening app in default browser canceled due to previous error(s)"
				say "Initialization failed.", :red
			else
				say "Opening app in default browser"
				open
			end
		end
	end


	desc "open", "open the current rake app in the default browser"
	def open
		%x(open http://#{APP_NAME}.dev)
	end


	desc "clear", "disable pow"
	long_desc <<-LONGDESC
		`rvmpow clear` will remove only the files necessary for pow.

		It's essentially reverting to the state before you ran `rvmpow init


	LONGDESC
	def clear
		exec_cmd {nil}
		shitHappens = false

		if @pow.restoreGitignore
			say_status "Done", REMOVE_GITIGNORE, :green
		else
			say_status "Failed", REMOVE_GITIGNORE, :red
			shitHappens = true
		end

		if @pow.restoreGemfile
			say_status "Done", REMOVE_GEMFILE, :green
		else
			say_status "Failed", REMOVE_GEMFILE, :red
			shitHappens = true
		end

		if @pow.deletePowenvFile
			say_status "Done", REMOVE_POWENV, :green
		else
			say_status "Failed", REMOVE_POWENV, :red
			shitHappens = true
		end

		if @pow.deleteRestartFile
			say_status "Done", REMOVE_RESTART, :green
		else
			say_status "Failed", REMOVE_RESTART, :red
			shitHappens = true
		end

		if @pow.deletePowLink
			say_status "Done", REMOVE_LINK, :green
		else
			say_status "Failed", REMOVE_LINK, :red
			shitHappens = true
		end

		if shitHappens
			say "Reverting all changes failed.", :red
		end
	end

	desc "add SUBCOMMAND", "add specific options"
	subcommand "add", Add

	desc "remove SUBCOMMAND", "remove specific options"
	subcommand "remove", Remove
end

CLI.start(ARGV)