#!/usr/bin/env ruby
# encoding: utf-8

# TODO: include private part from CLI in all Thor classes.

require 'thor'
require 'rvmpow'

class Add < Thor
	def initialize(*args)
	  super
	  @pow = RvmPow::Pow.new
	end

	desc "powenv", "Add .powenv file"
	def powenv
		@pow.createPowenvFile
	end

	desc "powlink", "Add app link i ~/.pow"
	def powlink
		@pow.createPowLink
	end

	desc "restart_file", "Touch restart.txt file in ./tmp/"
	def restart_file
		@pow.touchRestartFile
	end

	desc "gitignore", "Add '.powenv' to ./.gitignore"
	def gitignore
		@pow.gitignorePowenv
	end

	desc "addRvmInfoToGemfile", "Add rvm ruby and gemset information to ./Gemfile"
	def gemfile
		@pow.addRvmInfoToGemfile
	end
end


class Remove < Thor
	def initialize(*args)
	  super
	  @pow = RvmPow::Pow.new
	end

	desc "powenv", "Remove .powenv file"
	def powenv
		@pow.deletePowenvFile
	end

	desc "restart", "Remove restart.txt file from ./tmp/"
	def restart
		@pow.deleteRestartFile
	end

	desc "powlink", "Remove app link from ~/.pow"
	def powlink
		@pow.deletePowLink
	end

	desc "gitignore", "Remove .powenv from ./.gitignore"
	def gitignore
		@pow.restoreGitignore
	end

	desc "gemfile", "Remove rvm and gemset information from ./Gemfile"
	def gemfile
		@pow.restoreGemfile
	end
end


class CLI < Thor

	def initialize(*args)
	  super
	  @pow = RvmPow::Pow.new
	end


	desc "init", "enable pow"
	long_desc <<-LONGDESC
		`rvmpow init` will:

		- create a '.powenv' file in the current directory.
		\x5- add .powenv to the .gitignore file
		\x5- add the current app to pow
	LONGDESC
	option :show, type: :boolean, desc: "open in default browser"
	def init
		exitIfNotRakeAppOrNoRvm
		shitHappens = false

		# fail safe to avoid multiple initializations
		if File.exists?('.powenv')
			say "Initialization aborted.\nLooks like you already ran it on this project."
			exit 0
		end

		if @pow.createPowenvFile
			say_status "Done", "Create .powenv file", :green
		else
			say_status "Failed", "Create .powenv file", :red
			shitHappens = true
		end

		if @pow.createPowLink
			say_status "Done", "Create pow link", :green
		else
			say_status "Failed", "Create pow link", :red
			shitHappens = true
		end

		if @pow.touchRestartFile
			say_status "Done", "Touch restart file", :green
		else
			say_status "Failed", "Touch restart file", :red
			shitHappens = true
		end

		if @pow.gitignorePowenv
			say_status "Done", "Add .powenv to .gitignore", :green
		else
			say_status "Failed", "Add .powenv to .gitignore", :red
			shitHappens = true
		end

		if @pow.addRvmInfoToGemfile
			say_status "Done", "Add ruby and gemset info to Gemfile", :green
		else
			say_status "Failed", "Add ruby and gemset info to Gemfile", :red
			shitHappens = true
		end

		if options[:show]
			if shitHappens
				say "Opening app in default browser canceled due to previous error(s)"
				say "Initialization failed.", :red
			else
				say "Opening app in default browser"
				open
			end
		end
	end


	desc "open", "open the current rake app in the default browser"
	def open
		%x(open http://#{RvmPow::APP_NAME}.dev)
	end


	desc "clear", "disable pow"
	long_desc <<-LONGDESC
		`rvmpow clear` will remove only the files necessary for pow.
	LONGDESC
	def clear
		exitIfNotRakeAppOrNoRvm
		shitHappens = false

		if @pow.restoreGitignore
			say_status "Done", "Remove rvmpow entries from .gitignore", :green
		else
			say_status "Failed", "Remove rvmpow entries from .gitignore", :red
			shitHappens = true
		end

		if @pow.restoreGemfile
			say_status "Done", "Remove rvmpow entries from Gemfile", :green
		else
			say_status "Failed", "Remove rvmpow entries from Gemfile", :red
			shitHappens = true
		end

		if @pow.deletePowenvFile
			say_status "Done", "Delete .powenv file", :green
		else
			say_status "Failed", "Delete .powenv file", :red
			shitHappens = true
		end

		if @pow.deleteRestartFile
			say_status "Done", "Delete restart file", :green
		else
			say_status "Failed", "Delete restart file", :red
			shitHappens = true
		end

		if @pow.deletePowLink
			say_status "Done", "Delete pow link", :green
		else
			say_status "Failed", "Delete pow link", :red
			shitHappens = true
		end

		if shitHappens
			say "Removing rvmpow traces failed.", :red
		end
	end

	desc "add SUBCOMMAND", "add specific options"
	subcommand "add", Add

	desc "remove SUBCOMMAND", "remove specific options"
	subcommand "remove", Remove

	private

		def rakeApp?
			File.exists?(RvmPow::CONFIG_RU)
		end

		def rvm?
			File.exists?(RvmPow::RVM_BINARY)
		end

		def exitIfNotRakeAppOrNoRvm
			if !(rakeApp? && rvm?)
				error "The current directory does not seem to be the root of a rake app or rvm is not installed. Nothing to do!"
				exit 0
			end
		end
end

CLI.start(ARGV)